<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MacOS on Kelvas blog</title><link>https://kelvas09.github.io/blog/categories/macos/</link><description>Recent content in MacOS on Kelvas blog</description><generator>Hugo</generator><language>en</language><copyright>Copyright Â© KÃ©vin SibuÃ© 2024</copyright><lastBuildDate>Wed, 21 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kelvas09.github.io/blog/categories/macos/index.xml" rel="self" type="application/rss+xml"/><item><title>Convert a closure or a delegate to async / await</title><link>https://kelvas09.github.io/blog/posts/closure-delegate-to-async/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/closure-delegate-to-async/</guid><description>With Swift 5.5 and the SE-0296 it is now possible to use async / await as in many languages such as C#, Typescript, Javascript or even Rust.
Until now we handled asynchronism in three different ways: the delegated as Apple does a lot, closures (also called completionHandler) as many do or with RxSwift or other libraries like Promise.
But with the arrival of async / await it is no longer necessary to go through all that.</description></item><item><title>assert, precondition and fatalError</title><link>https://kelvas09.github.io/blog/posts/assert-precondition-fatalerror/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/assert-precondition-fatalerror/</guid><description>Have you ever crashed your application on purpose? Who would want to do that? What if I told you that there are tools for that and that it can be very useful, do you believe me? Let&amp;rsquo;s take a look at it together!
assert #If you come from languages like C or C++, assert will be the keyword you are most familiar with. And for good reason, it does exactly the same thing as an assert in C.</description></item><item><title>Swift: defer</title><link>https://kelvas09.github.io/blog/posts/defer/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/defer/</guid><description>The keyword defer in Swift is not often encountered. Especially when you start developing. Nevertheless it has a certain usefulness and can be very useful.
Definition #defer is a Swift keyword used to define code to execute before leaving the current scope:
func changeTitle(_ title: String) { defer { print(&amp;#34;After&amp;#34;) } print(&amp;#34;Before&amp;#34;) myTitleLabel.text = title } At first sight and if we only consider the order in which the instructions are written, we could believe that we will have the following output:</description></item><item><title>iOS: Executable not found ðŸ˜¨</title><link>https://kelvas09.github.io/blog/posts/executable_not_found/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/executable_not_found/</guid><description>I&amp;rsquo;m sure that like me, you have already had strange errors with XCode. What do I mean by &amp;ldquo;strange&amp;rdquo;? Well, the error is not clear and does not seem possible. Let me explain.
Error #I was developing a new SwiftUI application when I got the following error when launching the application on an emulator:
Error: Executable Not found How can the compilation be successful while not finding the executable? Very strange I think.</description></item><item><title>Swift: static func VS class func</title><link>https://kelvas09.github.io/blog/posts/static-func-vs-class-func/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/static-func-vs-class-func/</guid><description>Recently I was confronted with a code where I saw for the first time the keyword class func. And I must admit, I had no idea what it was about. But as usual I remedied the situation and I wanted to share my discovery with you.
static func #You should already be familiar with static func. If like me you started with languages like C# or Java you already had the opportunity to meet it.</description></item><item><title>Swift: weak and unowned</title><link>https://kelvas09.github.io/blog/posts/ios_weak_unowned/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/ios_weak_unowned/</guid><description>In a previous article I told you about the keyword @escaping which is very useful in case of a scope change. If you want to know more about it, I invite you to read the article I previously wrote here :Swift: @escaping.
But the change of scope leads to other consequences for the values &amp;ldquo;shared&amp;rdquo; potentially by the two scopes.
Before talking about weak and unowned it is important to go back to some important notions.</description></item><item><title>XCode: Build failed without any errors ðŸ¤”</title><link>https://kelvas09.github.io/blog/posts/build_failed_without_errors/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/build_failed_without_errors/</guid><description>It&amp;rsquo;s all in the title: have you ever had this problem? It&amp;rsquo;s still very strange. And it looks like this:
XCode: Build failed but no errors What&amp;rsquo;s going on? #After several searches it turns out that if you want to have more information on the errors in question, you have to go to the &amp;ldquo;Report navigator&amp;rdquo; which is the last icon in the left sidebar of your screen.
XCode: Report navigator As you can see there is much more information here than before.</description></item><item><title>The main.swift special file and the entry points</title><link>https://kelvas09.github.io/blog/posts/file-main/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/file-main/</guid><description>Last weekend had started as always: I wanted to learn something new. And that day I wanted to discover console applications in Swift. I&amp;rsquo;ve read a lot of interesting articles on the subject and I&amp;rsquo;ll be sure to tell you about it in my own articles very soon.
If you have already done iOS or macOS development you already know that the entry point is the AppDelegate or the SceneDelegate.</description></item><item><title>macOS xattr attributes</title><link>https://kelvas09.github.io/blog/posts/macos-xattr-attributes/</link><pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/macos-xattr-attributes/</guid><description>What is a file attribute? #I will probably push an open door, but a file system has attributes on the files. In particular, the read, write and execute of each file and this for the different groups:
-rw-rw-r-- 1 kelvas users 5120 Jul 09 04:30 sample.txt But these attributes were not enough for many cases. So an extension was added to the inodes to allow more functionality on the files: the extended attributes or xattr.</description></item><item><title>Incomprehensible errors</title><link>https://kelvas09.github.io/blog/posts/incomprehensible-errors/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/incomprehensible-errors/</guid><description>As you&amp;rsquo;ve probably gathered from the previous articles, I mostly do iOS and Android mobile. But from time to time, I go outside this mobile bubble to do other things.
The interesting thing about doing Xamarin for mobile is that it&amp;rsquo;s easy to port our application to desktop environments. But when I left my iOS and Android cocoon, I quickly realized that the tools for desktop development were not necessarily as advanced as their smartphone brother.</description></item></channel></rss>