<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>swift on Kelvas blog</title><link>https://kelvas09.github.io/blog/en/tags/swift/</link><description>Recent content in swift on Kelvas blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© KÃ©vin SibuÃ© 2022</copyright><lastBuildDate>Wed, 21 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kelvas09.github.io/blog/en/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Convert a closure or a delegate to async / await</title><link>https://kelvas09.github.io/blog/en/posts/closure-delegate-to-async/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/closure-delegate-to-async/</guid><description>With Swift 5.5 and the SE-0296 it is now possible to use async / await as in many languages such as C#, Typescript, Javascript or even Rust.
Until now we handled asynchronism in three different ways: the delegated as Apple does a lot, closures (also called completionHandler) as many do or with RxSwift or other libraries like Promise.
But with the arrival of async / await it is no longer necessary to go through all that.</description></item><item><title>assert, precondition and fatalError</title><link>https://kelvas09.github.io/blog/en/posts/assert-precondition-fatalerror/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/assert-precondition-fatalerror/</guid><description>Have you ever crashed your application on purpose? Who would want to do that? What if I told you that there are tools for that and that it can be very useful, do you believe me? Let&amp;rsquo;s take a look at it together!
assert # If you come from languages like C or C++, assert will be the keyword you are most familiar with. And for good reason, it does exactly the same thing as an assert in C.</description></item><item><title>Swift: defer</title><link>https://kelvas09.github.io/blog/en/posts/defer/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/defer/</guid><description>The keyword defer in Swift is not often encountered. Especially when you start developing. Nevertheless it has a certain usefulness and can be very useful.
Definition # defer is a Swift keyword used to define code to execute before leaving the current scope:
func changeTitle(_ title: String) { defer { print(&amp;#34;After&amp;#34;) } print(&amp;#34;Before&amp;#34;) myTitleLabel.text = title } At first sight and if we only consider the order in which the instructions are written, we could believe that we will have the following output:</description></item><item><title>iOS: Executable not found ðŸ˜¨</title><link>https://kelvas09.github.io/blog/en/posts/executable_not_found/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/executable_not_found/</guid><description>I&amp;rsquo;m sure that like me, you have already had strange errors with XCode. What do I mean by &amp;ldquo;strange&amp;rdquo;? Well, the error is not clear and does not seem possible. Let me explain.
Error # I was developing a new SwiftUI application when I got the following error when launching the application on an emulator:
Error: Executable Not found How can the compilation be successful while not finding the executable? Very strange I think.</description></item><item><title>Swift: static func VS class func</title><link>https://kelvas09.github.io/blog/en/posts/static-func-vs-class-func/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/static-func-vs-class-func/</guid><description>Recently I was confronted with a code where I saw for the first time the keyword class func. And I must admit, I had no idea what it was about. But as usual I remedied the situation and I wanted to share my discovery with you.
static func # You should already be familiar with static func. If like me you started with languages like C# or Java you already had the opportunity to meet it.</description></item><item><title>Swift: weak and unowned</title><link>https://kelvas09.github.io/blog/en/posts/ios_weak_unowned/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/ios_weak_unowned/</guid><description>In a previous article I told you about the keyword @escaping which is very useful in case of a scope change. If you want to know more about it, I invite you to read the article I previously wrote here :Swift: @escaping.
But the change of scope leads to other consequences for the values &amp;ldquo;shared&amp;rdquo; potentially by the two scopes.
Before talking about weak and unowned it is important to go back to some important notions.</description></item><item><title>XCode: Build failed without any errors ðŸ¤”</title><link>https://kelvas09.github.io/blog/en/posts/build_failed_without_errors/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/build_failed_without_errors/</guid><description>It&amp;rsquo;s all in the title: have you ever had this problem? It&amp;rsquo;s still very strange. And it looks like this:
XCode: Build failed but no errors What&amp;rsquo;s going on? # After several searches it turns out that if you want to have more information on the errors in question, you have to go to the &amp;ldquo;Report navigator&amp;rdquo; which is the last icon in the left sidebar of your screen.
XCode: Report navigator As you can see there is much more information here than before.</description></item><item><title>The main.swift special file and the entry points</title><link>https://kelvas09.github.io/blog/en/posts/file-main/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/file-main/</guid><description>Last weekend had started as always: I wanted to learn something new. And that day I wanted to discover console applications in Swift. I&amp;rsquo;ve read a lot of interesting articles on the subject and I&amp;rsquo;ll be sure to tell you about it in my own articles very soon.
If you have already done iOS or macOS development you already know that the entry point is the AppDelegate or the SceneDelegate.</description></item><item><title>Swift: @escaping</title><link>https://kelvas09.github.io/blog/en/posts/ios-escaping/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/ios-escaping/</guid><description>Do you know the @escaping statement in Swift? The compiler creates an error asking you to add it but you don&amp;rsquo;t know why?
Don&amp;rsquo;t worry, we&amp;rsquo;ll figure it out together.
The notion of asynchronism # With the latest versions of Swift, it is possible to use the async and await keywords to handle asynchronism in our application. But if you have coded applications with older versions of Swift, you probably use closures/callbacks for your asynchronous methods:</description></item><item><title>UIKit ViewController with SwiftUI</title><link>https://kelvas09.github.io/blog/en/posts/uikit-view-on-swiftui/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/uikit-view-on-swiftui/</guid><description>UIKit ViewController with SwiftUI # If you are curious like me, you must have tested SwiftUI. Personally I like this framework more and more. But I will tell you about my feedback in another article. However I have to reproach it for something: it still lacks a lot of things!
And yes, SwiftUI tries to join all the worlds (iOS, macOS, &amp;hellip;) in one. The problem is that the task is not easy.</description></item><item><title>Swift: bounds vs frame</title><link>https://kelvas09.github.io/blog/en/posts/frame-versus-bounds/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/frame-versus-bounds/</guid><description>Have you ever made an iOS app with UIKit? Have you ever made your own views? Customized a user control or a view?
Then you have probably already been in contact with the frames and bounds. But how well do you know them? Do you really know the difference between the two?
I noticed that for many the answer was: No.
So let&amp;rsquo;s go back to these notions to learn more.</description></item><item><title>UITextField bug ðŸ˜±</title><link>https://kelvas09.github.io/blog/en/posts/uitextfield-bug/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/uitextfield-bug/</guid><description>You may have already had it but there is a bug on UITextField only on iOS emulators (iPhone and iPad). It may happen that when you select a UITextField your application freezes like the picture below:
Now that your application looks like this, you cannot do anything and you have to restart your application.
via GIPHY
This is a bug known by the Apple team and originally seemed to affect only the iOS 13 version.</description></item><item><title>Swift : Async unit tests</title><link>https://kelvas09.github.io/blog/en/posts/swift-async-unit-test/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/en/posts/swift-async-unit-test/</guid><description>In software development there is one thing that is difficult to achieve : quality.
Anyone can code but few are able to code good software. When I say good I mean robust, stable and malleable according to the necessary evolutions.
But to guarantee such a quality you need tools. Beyond the timeless design pattern, debugging tools or other, there are especially unit tests.
Of course making an iOS application in Swift is no exception to the rule.</description></item></channel></rss>