<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kelvas blog</title><link>https://kelvas09.github.io/blog/</link><description>Recent content on Kelvas blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright Â© KÃ©vin SibuÃ© 2022</copyright><lastBuildDate>Sat, 11 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kelvas09.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>A new language is available! ðŸ‡«ðŸ‡·</title><link>https://kelvas09.github.io/blog/posts/new-language/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/new-language/</guid><description>We take the same and we start again # As you already know I am a French mobile developer and I like to share with you all my knowledge in this field.
In order to reach as many people as possible I have written most of the time in English. But I find that the iOS, Android and .NET community lacks some resources in our beautiful language.
That&amp;rsquo;s why I decided to provide my articles always in English for the greatest number but also in French!</description></item><item><title>Convert a closure or a delegate to async / await</title><link>https://kelvas09.github.io/blog/posts/closure-delegate-to-async/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/closure-delegate-to-async/</guid><description>With Swift 5.5 and the SE-0296 it is now possible to use async / await as in many languages such as C#, Typescript, Javascript or even Rust.
Until now we handled asynchronism in three different ways: the delegated as Apple does a lot, closures (also called completionHandler) as many do or with RxSwift or other libraries like Promise.
But with the arrival of async / await it is no longer necessary to go through all that.</description></item><item><title>assert, precondition and fatalError</title><link>https://kelvas09.github.io/blog/posts/assert-precondition-fatalerror/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/assert-precondition-fatalerror/</guid><description>Have you ever crashed your application on purpose? Who would want to do that? What if I told you that there are tools for that and that it can be very useful, do you believe me? Let&amp;rsquo;s take a look at it together!
assert # If you come from languages like C or C++, assert will be the keyword you are most familiar with. And for good reason, it does exactly the same thing as an assert in C.</description></item><item><title>Swift: defer</title><link>https://kelvas09.github.io/blog/posts/defer/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/defer/</guid><description>The keyword defer in Swift is not often encountered. Especially when you start developing. Nevertheless it has a certain usefulness and can be very useful.
Definition # defer is a Swift keyword used to define code to execute before leaving the current scope:
func changeTitle(_ title: String) { defer { print(&amp;#34;After&amp;#34;) } print(&amp;#34;Before&amp;#34;) myTitleLabel.text = title } At first sight and if we only consider the order in which the instructions are written, we could believe that we will have the following output:</description></item><item><title>iOS: Executable not found ðŸ˜¨</title><link>https://kelvas09.github.io/blog/posts/executable_not_found/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/executable_not_found/</guid><description>I&amp;rsquo;m sure that like me, you have already had strange errors with XCode. What do I mean by &amp;ldquo;strange&amp;rdquo;? Well, the error is not clear and does not seem possible. Let me explain.
Error # I was developing a new SwiftUI application when I got the following error when launching the application on an emulator:
Error: Executable Not found How can the compilation be successful while not finding the executable? Very strange I think.</description></item><item><title>Swift: static func VS class func</title><link>https://kelvas09.github.io/blog/posts/static-func-vs-class-func/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/static-func-vs-class-func/</guid><description>Recently I was confronted with a code where I saw for the first time the keyword class func. And I must admit, I had no idea what it was about. But as usual I remedied the situation and I wanted to share my discovery with you.
static func # You should already be familiar with static func. If like me you started with languages like C# or Java you already had the opportunity to meet it.</description></item><item><title>Swift: weak and unowned</title><link>https://kelvas09.github.io/blog/posts/ios_weak_unowned/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/ios_weak_unowned/</guid><description>In a previous article I told you about the keyword @escaping which is very useful in case of a scope change. If you want to know more about it, I invite you to read the article I previously wrote here :Swift: @escaping.
But the change of scope leads to other consequences for the values &amp;ldquo;shared&amp;rdquo; potentially by the two scopes.
Before talking about weak and unowned it is important to go back to some important notions.</description></item><item><title>XCode: Build failed without any errors ðŸ¤”</title><link>https://kelvas09.github.io/blog/posts/build_failed_without_errors/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/build_failed_without_errors/</guid><description>It&amp;rsquo;s all in the title: have you ever had this problem? It&amp;rsquo;s still very strange. And it looks like this:
XCode: Build failed but no errors What&amp;rsquo;s going on? # After several searches it turns out that if you want to have more information on the errors in question, you have to go to the &amp;ldquo;Report navigator&amp;rdquo; which is the last icon in the left sidebar of your screen.
XCode: Report navigator As you can see there is much more information here than before.</description></item><item><title>Publish automatically Hugo blog with GitHub Actions</title><link>https://kelvas09.github.io/blog/posts/auto-publish-with-actions/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/auto-publish-with-actions/</guid><description>Repetitive actions are dangerous. Especially if they are simple. We tend to pay less and less attention to them and in the end, we make mistakes. Fortunately it is possible, not to say recommended, to automate these actions.
So today, as you may have guessed, we&amp;rsquo;re going to change the theme a bit and talk about the pipeline on GitHub Actions.
The context # I love to write and share, therefore I have this technical blog allowing me to pass on what I learn and what I think is useful to others.</description></item><item><title>The main.swift special file and the entry points</title><link>https://kelvas09.github.io/blog/posts/file-main/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/file-main/</guid><description>Last weekend had started as always: I wanted to learn something new. And that day I wanted to discover console applications in Swift. I&amp;rsquo;ve read a lot of interesting articles on the subject and I&amp;rsquo;ll be sure to tell you about it in my own articles very soon.
If you have already done iOS or macOS development you already know that the entry point is the AppDelegate or the SceneDelegate.</description></item><item><title>Swift: @escaping</title><link>https://kelvas09.github.io/blog/posts/ios-escaping/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/ios-escaping/</guid><description>Do you know the @escaping statement in Swift? The compiler creates an error asking you to add it but you don&amp;rsquo;t know why?
Don&amp;rsquo;t worry, we&amp;rsquo;ll figure it out together.
The notion of asynchronism # With the latest versions of Swift, it is possible to use the async and await keywords to handle asynchronism in our application. But if you have coded applications with older versions of Swift, you probably use closures/callbacks for your asynchronous methods:</description></item><item><title>UIKit ViewController with SwiftUI</title><link>https://kelvas09.github.io/blog/posts/uikit-view-on-swiftui/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/uikit-view-on-swiftui/</guid><description>UIKit ViewController with SwiftUI # If you are curious like me, you must have tested SwiftUI. Personally I like this framework more and more. But I will tell you about my feedback in another article. However I have to reproach it for something: it still lacks a lot of things!
And yes, SwiftUI tries to join all the worlds (iOS, macOS, &amp;hellip;) in one. The problem is that the task is not easy.</description></item><item><title>Swift: bounds vs frame</title><link>https://kelvas09.github.io/blog/posts/frame-versus-bounds/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/frame-versus-bounds/</guid><description>Have you ever made an iOS app with UIKit? Have you ever made your own views? Customized a user control or a view?
Then you have probably already been in contact with the frames and bounds. But how well do you know them? Do you really know the difference between the two?
I noticed that for many the answer was: No.
So let&amp;rsquo;s go back to these notions to learn more.</description></item><item><title>UITextField bug ðŸ˜±</title><link>https://kelvas09.github.io/blog/posts/uitextfield-bug/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/uitextfield-bug/</guid><description>You may have already had it but there is a bug on UITextField only on iOS emulators (iPhone and iPad). It may happen that when you select a UITextField your application freezes like the picture below:
Now that your application looks like this, you cannot do anything and you have to restart your application.
via GIPHY
This is a bug known by the Apple team and originally seemed to affect only the iOS 13 version.</description></item><item><title>macOS xattr attributes</title><link>https://kelvas09.github.io/blog/posts/macos-xattr-attributes/</link><pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/macos-xattr-attributes/</guid><description>What is a file attribute? # I will probably push an open door, but a file system has attributes on the files. In particular, the read, write and execute of each file and this for the different groups:
-rw-rw-r-- 1 kelvas users 5120 Jul 09 04:30 sample.txt But these attributes were not enough for many cases. So an extension was added to the inodes to allow more functionality on the files: the extended attributes or xattr.</description></item><item><title>The pillars of the software (1/2)</title><link>https://kelvas09.github.io/blog/posts/pillars-software-1-on-2/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/pillars-software-1-on-2/</guid><description>The pillars of the software (1/2) # Today we will leave the mobile topics and talk about the thousands of software. What I mean here by pillar is the software / libraries that everyone uses directly or indirectly (via other software / libraries). And we will see together that a lot relies on little and that is a bit scary!
Actually I wanted to talk about this because I came across this tweet from Mike van Riel (@mvriel: https://twitter.</description></item><item><title>Segmentation fault and .NET on Linux</title><link>https://kelvas09.github.io/blog/posts/segmentation-fault-dotnet-linux/</link><pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/segmentation-fault-dotnet-linux/</guid><description>Segmentation fault and .NET on Linux # For some time I have re-enabled one of my PC with a good Linux Manjaro, it&amp;rsquo;s very convenient to run tens of services continuously without having to leave my Mac on or at home.
And I wanted to experience .NET development with VSCode (to do Blazor I admit it) all on my Linux.
Of course I follow the Microsoft tutorials to set up the environment and I start here: https://docs.</description></item><item><title>Incomprehensible errors</title><link>https://kelvas09.github.io/blog/posts/incomprehensible-errors/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/incomprehensible-errors/</guid><description>As you&amp;rsquo;ve probably gathered from the previous articles, I mostly do iOS and Android mobile. But from time to time, I go outside this mobile bubble to do other things.
The interesting thing about doing Xamarin for mobile is that it&amp;rsquo;s easy to port our application to desktop environments. But when I left my iOS and Android cocoon, I quickly realized that the tools for desktop development were not necessarily as advanced as their smartphone brother.</description></item><item><title>How to make a good README?</title><link>https://kelvas09.github.io/blog/posts/how-make-good-readme/</link><pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/how-make-good-readme/</guid><description>If you like to share and you make code, you probably have a GitHub, GitLab or other account to share your interesting pieces of code to the world.
Like any Git repo, you&amp;rsquo;re going to have a README file. And you may not know it yet, but this is perhaps the most important part of your repo.
Beyond your code and its quality, when you share code, it is important that developers who find your code can easily understand what it is about and especially to give them confidence in you, even if they have never seen you before and do not (yet) know your work.</description></item><item><title>Swift : Async unit tests</title><link>https://kelvas09.github.io/blog/posts/swift-async-unit-test/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/swift-async-unit-test/</guid><description>In software development there is one thing that is difficult to achieve : quality.
Anyone can code but few are able to code good software. When I say good I mean robust, stable and malleable according to the necessary evolutions.
But to guarantee such a quality you need tools. Beyond the timeless design pattern, debugging tools or other, there are especially unit tests.
Of course making an iOS application in Swift is no exception to the rule.</description></item><item><title>Kotlin: Cache Managment</title><link>https://kelvas09.github.io/blog/posts/kotlin-cache-management/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/kotlin-cache-management/</guid><description>Kotlin Cache Management # In computer science, we always say that there are two things that are complicated: naming variables and managing the cache! And that&amp;rsquo;s absolutely true. Unfortunately, this is a recurring problem in mobility since we must save as much as possible the network consumption of the mobile device we have in our hands:
network loss weak networks (Edge, 3G,&amp;hellip;) &amp;hellip; It is therefore important to know how to manage data caching in order to provide a meaningful user experience.</description></item><item><title>Firebase : Functions</title><link>https://kelvas09.github.io/blog/posts/firebase-functions/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/firebase-functions/</guid><description>Firebase is a very complete service offered by Google that allows a large number of things:
Authentication Database Storage Hosting Functions ML Kit Crashlytics Performance Test Lab &amp;hellip; And many other things!
The part we are interested in today is the cloud function.
As you probably know, cloud functions are simple pieces of code executed on demand. They are generally serveless and can therefore be executed anywhere and at any time without being repeated in a specific context.</description></item><item><title>Firebase and Azure DevOps</title><link>https://kelvas09.github.io/blog/posts/firebase-azure-devops/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/firebase-azure-devops/</guid><description>Firebase # As I have already mentioned in this article, Firebase is a service offered by Google for mobile and web developers to facilitate a large number of parts of application development:
Authentication NoSql Database cloud function Storage (image, video, &amp;hellip;) Web application hosting Real-time database Test lab Crash reporting in real time Remote config Cloud messaging It is therefore a very useful service for the rapid prototyping of an application and even for an application in production and all this for a very modest price.</description></item><item><title>Upload flutter project on Google Play</title><link>https://kelvas09.github.io/blog/posts/upload-flutter-googleplay/</link><pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate><guid>https://kelvas09.github.io/blog/posts/upload-flutter-googleplay/</guid><description>Upload flutter projet on Google Play # Have you ever tried flutter? If not, I invite you to do it, it&amp;rsquo;s worth a visit!
But did you go as far as publishing on stores and especially on Google Play?
I personally tried to publish an application made with this technology on Google Play but I found myself faced with an unexpected error:
That&amp;rsquo;s a problem!
Fortunately Android Studio allows us to compile for several platforms in the same APK but also to compile several APK, each for a different platform!</description></item></channel></rss>