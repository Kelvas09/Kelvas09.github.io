[{"content":"Mais qu\u0026rsquo;est-ce que cette erreur ? Vous avez d√©j√† eu ce moment, devant votre d√©bogueur o√π vous regarder le message d\u0026rsquo;erreur, vous vous rem√©morez ce que vous venez de faire que derni√®res modifications et \u0026hellip; rien. Rien n\u0026rsquo;a de sens.\nvia GIPHY\nJ\u0026rsquo;ai v√©cu aujourd\u0026rsquo;hui m√™me un tel moment. Je travaille actuellement sur une nouvelle application en .NET MAUI. Je faisais une classe g√©n√©rique pour la gestion des pages de l\u0026rsquo;application. J\u0026rsquo;impl√©mentais cette derni√®re dans un cas r√©el et la BOOM üí• j\u0026rsquo;ai cette erreur qui s\u0026rsquo;affiche sur mon Visual Studio :\nSystem. Reflection. TargetInvocationException: \u0026lsquo;Exception has been thrown by the target of an invocation.\u0026rsquo;\nImpossible de trouver ce que cela pouvait bien √™tre. J\u0026rsquo;ai annul√© mes toutes derni√®res modifications sur Git, mais l√† encore, pas de changement. Donc sois c\u0026rsquo;est une modification ant√©rieure, soit j\u0026rsquo;ai un plus gros probl√®me.\nSi comme moi vous faites pas mal de .NET, vous avez l\u0026rsquo;habitude de supprimer les dossiers bin et obj qui sont souvent la cause de nombreux probl√®mes. Bien s√ªr par r√©flexe je tente cette astuce : mais toujours rien. Alors cette fois je tente d\u0026rsquo;activer l\u0026rsquo;arr√™t automatique du d√©bogueur pour voir exactement o√π ce situe le probl√®me, en esp√©rant que se probl√®me vient bien de mon code.\nPour faire √ßa, si vous ne le savez pas, il faut ouvrir le menu Param√®tres d\u0026rsquo;exceptions.\nDans ce menu je recherche l\u0026rsquo;exception globale System.Exception et je la coche.\n√Ä partir de l√† je relance l\u0026rsquo;application en mode d√©bug. Et comme vous pouvez le constater par vous-m√™me, l\u0026rsquo;erreur est beaucoup plus explicite !\nIl manquait donc simplement une r√©f√©rence dans mon injection de d√©pendance automatique :\napplication.builder.Services.AddScoped\u0026lt;IDiscussionRepository, FakeDiscussionRepository\u0026gt;(); Donc rien de bien m√©chant, mais qui aura occasionn√© bien des recherches et des tests pour quelque chose de simple. Alors si vous aussi vous vous retrouvez dans une situation comme celle-ci, n\u0026rsquo;h√©sitez pas √† appliquer cette astuce , qui je l\u0026rsquo;esp√®re, vous aidera √† gagner pas mal de temps !\nEn esp√©rant vous revoir tr√®s vite sur mon blog !\n","date":"2 octobre 2023","permalink":"/blog/fr/posts/dotnet-maui-targetinvocationexception/","section":"Posts","summary":"Mais qu\u0026rsquo;est-ce que cette erreur ?","title":"All√¥ Huston ... Nous avons un probl√®me"},{"content":"Ce n\u0026rsquo;est plus une nouveaut√©, SwiftUI fait partie de notre √©cosyst√®me de d√©veloppeur iOS. Nous avons de plus en plus d\u0026rsquo;opportunit√© avec cette technologie et il est grand temps de se projeter avec elle.\nDe ce fait lorsque l\u0026rsquo;on cr√©e un nouveau composant graphique on se pose toujours la question : Est-ce que je le cr√©e en SwiftUI pour qu\u0026rsquo;il soit compatible avec l\u0026rsquo;avenir ? Ou est-ce que je le fais avec mon bon vieux UIKit pour √™tre s√ªr de bien tout ma√Ætriser ? Je pense que beaucoup d\u0026rsquo;entre nous choisissent la seconde option pour plus de facilit√©, mais aussi parce que SwiftUI permet d√©j√† d\u0026rsquo;incorporer des vues UIKit au sein de SwiftUI.\nJ\u0026rsquo;avais d\u0026rsquo;ailleurs d√©j√† parl√© d\u0026rsquo;un sous-ensemble de cette possibilit√© dans cet article : https://kelvas09.github.io/blog/posts/uikit-view-on-swiftui/ Il est fort √† parier que SwiftUI deviendra un jour la principale mani√®re de concevoir des applications pour iOS, iPadOS, macOS et tvOS. M√™me si UIKit ne dispara√Ætra jamais selon moi, il est tr√®s important d\u0026rsquo;avoir une bonne connaissance et une bonne stack SwiftUI. De ce fait, cr√©er des composants en SwiftUI first semble pertinent.\nHeureusement pour nous, il est assez simple de convertir une vue SwiftUI en vue UIKit.\nD√©finir une vue SwiftUI # Pour commencer, d√©finissons une vue SwiftUI. Pour les besoins de la d√©monstration cette derni√®re sera tr√®s simple. Bien entendu, peu importe la complexit√© de votre vue, cela fonctionne pareil :\nimport SwiftUI public struct MyCustomView: View { public let title: String public let tip: String public var body: some View { VStack { Text(title) .font(.title3) Text(tip) .font(.caption) } } } Deux textes l\u0026rsquo;un en dessous de l\u0026rsquo;autre avec une police diff√©rente. Tr√®s simple, mais largement suffisant pour notre cas.\nIl nous faut maintenant convertir notre vue avec UIKit.\nWrapper la vue SwiftUI dans une vue UIKit # Un peu de code # √Ä vrai dire convertir n\u0026rsquo;est pas le bon mot, embarqu√© serait le plus exact. Pour rappel, avec UIKit tout est UIView. Il nous faut donc cr√©er une vue capable de contenir notre vue SwiftUI. Pour ce faire et afin d\u0026rsquo;√©viter de dupliquer du code, nous allons cr√©er notre propre class UIView capable de faire la conversion √† volont√©.\npublic class UIMyCustomView: UIView { public init() { super.init(frame: .zero) } override public init(frame: CGRect) { super.init(frame: frame) } @available(*, unavailable) required init?(coder: NSCoder) { fatalError(\u0026#34;init(coder:) has not been implemented\u0026#34;) } public func setup( title: String, tip: String ) { backgroundColor = .clear subviews.forEach { $0.removeFromSuperview() } let myCustomView = MyCustomView(title: title, tip: tip) let viewController = UIHostingController(rootView: myCustomView) guard let swiftUIView = viewController.view else { return } swiftUIView.backgroundColor = .clear swiftUIView.translatesAutoresizingMaskIntoConstraints = false addSubview(swiftUIView) let leading = swiftUIView.leadingAnchor.constraint(equalTo: leadingAnchor) leading.priority = .defaultHigh leading.isActive = true let trailing = swiftUIView.trailingAnchor.constraint(equalTo: trailingAnchor) trailing.priority = .defaultHigh trailing.isActive = true let top = swiftUIView.topAnchor.constraint(equalTo: topAnchor) top.priority = .defaultHigh top.isActive = true let bottom = swiftUIView.bottomAnchor.constraint(equalTo: bottomAnchor) bottom.priority = .defaultHigh bottom.isActive = true } } Pour des raisons √©videntes nous rendons transparente notre nouvelle vue et nous supprimons d\u0026rsquo;√©ventuelles sous vues pr√©-existantes. Il va de soit √©galement que la m√©thode setup pouvant √™tre appel√© plusieurs fois, il est important de bien toujours nettoyer notre vue pour √©viter d\u0026rsquo;empiler les vue SwiftUI.\n√Ä partir de l√† la partie int√©ressante commence : Nous cr√©ons notre vue SwiftUI comme on le ferait dans du code standard. Nous en profitons pour passer les informations n√©cessaires au bon fonctionnement (ici le titre et le conseil).\nBien s√ªr il est possible d\u0026rsquo;utiliser des modifiers SwiftUI √† ce moment l√† aussi. Maintenant il nous faut cr√©er un UIHostingController avec en rootView notre vue SwiftUI fraichement cr√©√©e. Utiliser un UIHostingController permet justement d\u0026rsquo;embarqu√© notre vue SwiftUI dans un controller UIKit. Et comme vous le savez d√©j√† probablement, chaque UIViewController poss√®de une vue. C\u0026rsquo;est cette derni√®re que nous allons r√©cup√©rer et ajouter √† notre propre vue.\nIl ne nous reste plus qu\u0026rsquo;√† attacher cette vue aux quatre coins de la n√¥tre et le tour est jou√© !\nLa preuve en image # struct MyCustomView_Previews: PreviewProvider { static var previews: some View { MyCustomView( title: \u0026#34;This is my title\u0026#34;, tip: \u0026#34;This is my tips\u0026#34; ) } } Avec le code ci-dessus nous optenons le r√©sultat suivant. Il s\u0026rsquo;agit d\u0026rsquo;une vue 100% fait en SwiftUI.\nSwiftUI preview Comme vous pouvez le voir, le rendu est tel qu\u0026rsquo;attendu. Maintenant regardons notre vue incorpor√©e dans une vue UIKit. Le code suivant permet de g√©n√©rer la prochaine photo :\nclass ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() } override func viewDidAppear(_ animated: Bool) { super.viewDidAppear(animated) let subview = UIMyCustomView() subview.setup(title: \u0026#34;This is my title\u0026#34;, tip: \u0026#34;This is my tip\u0026#34;) subview.translatesAutoresizingMaskIntoConstraints = false view.addSubview(subview) let leading = subview.leadingAnchor.constraint(equalTo: view.leadingAnchor) leading.priority = .defaultHigh leading.isActive = true let trailing = subview.trailingAnchor.constraint(equalTo: view.trailingAnchor) trailing.priority = .defaultHigh trailing.isActive = true let top = subview.topAnchor.constraint(equalTo: view.topAnchor) top.priority = .defaultHigh top.isActive = true let bottom = subview.bottomAnchor.constraint(equalTo: view.bottomAnchor) bottom.priority = .defaultHigh bottom.isActive = true } } UIKit display Comme vous pouvez le constater le r√©sultat est exactement le m√™me.\nJ\u0026rsquo;esp√®re que vous avez aim√© cet article ! N\u0026rsquo;h√©sitez pas √† r√©agir sur Twitter ou Mastodon ! √Ä bient√¥t !\n","date":"1 octobre 2023","permalink":"/blog/fr/posts/swiftui_view_inside_uikit_view/","section":"Posts","summary":"Ce n\u0026rsquo;est plus une nouveaut√©, SwiftUI fait partie de notre √©cosyst√®me de d√©veloppeur iOS.","title":"Utiliser une vue SwiftUI dans UIKit"},{"content":"On prend les m√™mes et on recommence # Comme vous le savez d√©j√† je suis un d√©veloppeur mobile fran√ßais et j\u0026rsquo;aime partager avec vous tous mes connaissances en la mati√®re.\nAfin de toucher le plus grand nombre j\u0026rsquo;ai le plus souvent √©crit en anglais. Mais je trouve que la communaut√© iOS, Android et .NET manque quelque peu de ressources dans notre belle langue.\nC\u0026rsquo;est pourquoi j\u0026rsquo;ai d√©cider de fournir mes articles toujours en anglais pour le plus grand nombre mais aussi en fran√ßais !\nIl vous est donc possible de changer de langue juste en cliquant sur l\u0026rsquo;un des drapeaux enn haut de chaque page de mon blog.\nComme vous pouvez l\u0026rsquo;imaginer, l\u0026rsquo;√©criture en fran√ßais sera plus simple pour moi, c\u0026rsquo;est pourquoi certains articles sortiront probablement d\u0026rsquo;abord en fran√ßais mais seront, par la suite, toujours traduit vers l\u0026rsquo;anglais. Concernant les articles existants, ces derniers seront traduit au fur et √† mesure en fran√ßais.\nDe nouveaux formats # Dans les mois qui suivrons je m\u0026rsquo;essayerai aussi √† de nouveaux formats d\u0026rsquo;articles : podcast, vid√©os, tutoriels anim√©s, \u0026hellip;\nIci aussi ces formats seront trait√©s dans les deux langues.\n√Ä tr√®s bient√¥t pour de nouveaux articles !\n","date":"11 mars 2023","permalink":"/blog/fr/posts/new-language/","section":"Posts","summary":"On prend les m√™mes et on recommence # Comme vous le savez d√©j√† je suis un d√©veloppeur mobile fran√ßais et j\u0026rsquo;aime partager avec vous tous mes connaissances en la mati√®re.","title":"Une nouvelle langue est disponible ! üá´üá∑"}]